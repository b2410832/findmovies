{"version":3,"sources":["components/SearchMovies.js","components/NavBar.js","components/MovieCard.js","components/MovieCardList.js","container/App.js","serviceWorker.js","index.js"],"names":["SearchMovies","searchChange","submitChange","query","className","onSubmit","htmlFor","type","name","value","onChange","placeholder","NavBar","href","MovieCard","poster_path","title","date","overview","vote_average","id","style","maxWidth","src","alt","icon","size","color","MovieCardList","movies","map","movie","i","key","release_date","library","add","fab","faStar","App","onSubmitChange","e","preventDefault","state","url","fetch","then","response","json","data","setState","results","error","console","log","onSearchChange","event","target","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.fad18faf.chunk.js","sourcesContent":["import React from 'react';\nimport './SearchMovies.css';\n\nfunction SearchMovies({ searchChange, submitChange, query }) {\n  return (\n    <div className=\"search-container\">\n        <h1 className=\"title-cta\">Search Now.</h1>\n        <h2 className=\"title\">Want to find out more about your favorite movies?</h2>\n            <div className=\"search-form\">\n            \t<form className=\"form\" onSubmit={ submitChange }>\n            \t\t<label className=\"label\" htmlFor=\"query\"></label>\n            \t\t<input \n            \t\t\tclassName=\"input\" \n            \t\t\ttype=\"text\" \n            \t\t\tname=\"query\" \n                        value={ query } \n            \t\t\tonChange={ searchChange }\n            \t\t\tplaceholder=\"search for a movie, i.e. Star wars...\"\n            \t\t/>\n            \t\t<button className=\"button\" type=\"submit\">Search</button>\n            \t</form>\n            </div>\n    </div>\n  );\n}\n\nexport default SearchMovies;","import React from 'react';\nimport './NavBar.css';\n\nfunction NavBar() {\n  return (\n    <div className=\"search-form\">\n    \t<nav className=\"navbar navbar-dark bg-color\">\n  \t\t\t<a className=\"navbar-brand logo\" href=\"../index.js\">FindMovies</a>\n\t\t</nav>\n    </div>\n  );\n}\n\nexport default NavBar;","import React from 'react';\nimport './MovieCard.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nfunction MovieCard({ poster_path, title, date, overview, vote_average }) {\n  return (\n\t\t<div className=\"card mb-3\" id=\"override-card\" style={{ maxWidth: '75%'}}>\n\t\t  <div className=\"row no-gutters\">\n\t\t    <div className=\"col-md-4 bg-img\">\n\t\t      <img src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${poster_path}`}  \n\t\t      \t\tclassName=\"card-img\" \n\t\t      \t\talt={ title + \" poster\"}\n\t\t      />\n\t\t    </div>\n\t\t    <div className=\"col-md-8\">\n\t\t      <div className=\"card-body\">\n\t\t        <h2 className=\"card-title\">{ title }</h2>\n\t\t        <div className=\"rating\">\n\t\t\t        <FontAwesomeIcon icon=\"star\" size=\"2x\" color=\"orange\"/>\n\t\t\t        <strong className=\"font-vote\">{ vote_average }</strong>\n\t\t\t        <span className=\"font-gray\">/</span>\n\t\t\t        <span className=\"font-gray\">10</span>\n\t\t        </div>\n\t\t        <h6 className=\"date card-text\">{ date }</h6>\n\t\t        <h5 className=\"overview\">Overview</h5>\n\t\t        <p className=\"card-text overview-text\">\"{ overview }\"</p>\n\t\t      </div>\n\t\t    </div>\n\t\t  </div>\n\t\t</div>    \n  );\n}\n\nexport default MovieCard;\n\n// <div className=\"card mb-3\" >\n// \t<div className=\"row no-gutters\">\n// \t\t<div className=\"col-4\">\n// \t    \t<img className=\"poster-image\" \n// \t    \t\t style={{maxWidth: '540px'}} \n// \t    \t\t src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${poster_path}`} \n// \t    \t\t alt={ title + \" poster\"}\n// \t    \t/>\n// \t\t</div>\n// \t\t<div className=\"col-8\">\n// \t    \t<div className=\"card-body\">\n// \t\t    \t<h2 className=\"movie-title card-title\">{ title }</h2>\n// \t\t    \t<small className=\"date card-text\">{ date }</small>\n// \t\t    \t<p className=\"card-text description\">\n// \t\t    \t\t\"{ overview }\"\n// \t\t    \t</p>\n// \t\t    </div>\n// \t    </div>\n// \t</div>\n// </div>","import React from 'react';\nimport MovieCard from './MovieCard.js';\nimport './MovieCardList.css';\n\nfunction MovieCardList({ movies }) {\n  return (\n    <div className=\"cardlist-container\">\n    \t{\n    \t\tmovies.map((movie, i) => \n    \t\t\t<MovieCard \n    \t\t\t\tkey={ movies[i].id }\n    \t\t\t\tposter_path={ movies[i].poster_path }\n\t\t    \t\ttitle={ movies[i].title }\n\t\t    \t\tdate={ movies[i].release_date }\n\t\t    \t\toverview={ movies[i].overview }\n                    vote_average={ movies[i].vote_average }\n    \t\t\t/>\n    \t\t)\n    \t}\n    \t\n    </div>\n  );\n}\n\nexport default MovieCardList;","import React, { Component } from 'react';\nimport SearchMovies from '../components/SearchMovies.js';\nimport NavBar from '../components/NavBar.js';\nimport MovieCardList from '../components/MovieCardList.js';\nimport './App.css';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { faStar } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(fab, faStar)\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      query:'',\n      movies:[],\n    }\n  }\n\n  onSubmitChange = (e) => {\n    e.preventDefault(); //必要！！避免瀏覽器儲存query的預設行為（不是很懂為什麼...但沒加就會失敗） \n    const query= this.state.query;\n    const url = `https://api.themoviedb.org/3/search/movie?api_key=c28333c97f27ab72531d6065d408f418&language=en-US&query=${query}&page=1&include_adult=false`;    \n    try{\n      fetch(url)\n      .then(response => response.json())\n      .then(data => this.setState({ movies: data.results, query:'' }));\n    } catch(error) {\n      console.log(error);\n    }\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ query: event.target.value });\n  }\n\n  render() {\n    const { query, movies } = this.state;\n    return (\n    <div>\n      <div className=\"fragment\">\n        <NavBar />\n        <SearchMovies \n          searchChange={ this.onSearchChange } \n          submitChange={ this.onSubmitChange } \n          query={ query }\n        />\n      </div>\n      <MovieCardList movies={ movies }/>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}